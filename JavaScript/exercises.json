[
  {
    "title": "Random Code Generator",
    "description": "Generate a random alphanumeric code.",
    "function": "function randomCode(length) {\n  return [...Array(length)].map(() => Math.random().toString(36)[2]).join('');\n}",
    "test": "console.log(randomCode(8));"
  },
  {
    "title": "State Management",
    "description": "Simple store to manage state.",
    "function": "class Store {\n  constructor(state) { this.state = state; }\n  get(key) { return this.state[key]; }\n  set(key, val) { this.state[key] = val; }\n}",
    "test": "const store = new Store({ count: 0 });\nstore.set('count', 5);\nconsole.log(store.get('count'));"
  },
  {
    "title": "Auto Documentation",
    "description": "Generate docs from function comments.",
    "function": "function generateDocs(fn) {\n  return fn.toString().match(/\\/\\*\\*(.*?)\\*\\//s)?.[1].trim();\n}",
    "test": "/** Adds numbers */\nfunction add(a, b) { return a + b; }\nconsole.log(generateDocs(add));"
  },
  {
    "title": "Text Search Engine",
    "description": "Search word in a text document.",
    "function": "function search(text, word) {\n  return text.includes(word);\n}",
    "test": "console.log(search('hello world', 'world')); // Output: true"
  },
  {
    "title": "Unit Testing System",
    "description": "Simple assertion-based testing.",
    "function": "function test(name, fn) {\n  try { fn(); console.log(name + ' passed'); }\n  catch (e) { console.error(name + ' failed', e); }\n}",
    "test": "test('Addition', () => { if (1 + 1 !== 2) throw 'Fail'; });"
  }
]