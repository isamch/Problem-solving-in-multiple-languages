[
  {
    "title": "Parse String",
    "description": "Parse a comma-separated string into an array.",
    "function": "function parseCSV(str) {\n  return str.split(',').map(s => s.trim());\n}",
    "test": "console.log(parseCSV('apple, banana, cherry')); // Output: ['apple', 'banana', 'cherry']"
  },
  {
    "title": "Simple Hash",
    "description": "Generate a simple hash from a string.",
    "function": "function simpleHash(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash += str.charCodeAt(i);\n  }\n  return hash;\n}",
    "test": "console.log(simpleHash('abc')); // Output: 294"
  },
  {
    "title": "Roman Numerals",
    "description": "Convert integer to Roman numeral.",
    "function": "function toRoman(num) {\n  const val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  const sym = ['M','CM','D','CD','C','XC','L','XL','X','IX','V','IV','I'];\n  let res = '';\n  for (let i = 0; i < val.length; i++) {\n    while (num >= val[i]) {\n      num -= val[i];\n      res += sym[i];\n    }\n  }\n  return res;\n}",
    "test": "console.log(toRoman(1994)); // Output: 'MCMXCIV'"
  },
  {
    "title": "Compress String",
    "description": "Compress repeated characters (basic).",
    "function": "function compress(str) {\n  return str.replace(/(.)\\1+/g, (m, c) => c + m.length);\n}",
    "test": "console.log(compress('aaabbbcc')); // Output: 'a3b3c2'"
  },
  {
    "title": "Calculate Area",
    "description": "Calculate area of a rectangle.",
    "function": "function area(w, h) {\n  return w * h;\n}",
    "test": "console.log(area(5, 3)); // Output: 15"
  },
  {
    "title": "Generate Password",
    "description": "Generate a random password of given length.",
    "function": "function generatePassword(len) {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let pwd = '';\n  for (let i = 0; i < len; i++) {\n    pwd += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return pwd;\n}",
    "test": "console.log(generatePassword(8));"
  },
  {
    "title": "Decimal to Binary",
    "description": "Convert a decimal number to binary.",
    "function": "function decToBin(n) {\n  return n.toString(2);\n}",
    "test": "console.log(decToBin(10)); // Output: '1010'"
  },
  {
    "title": "Binary to Decimal",
    "description": "Convert a binary string to decimal.",
    "function": "function binToDec(bin) {\n  return parseInt(bin, 2);\n}",
    "test": "console.log(binToDec('1010')); // Output: 10"
  },
  {
    "title": "Fibonacci Sequence",
    "description": "Generate Fibonacci sequence up to n terms.",
    "function": "function fibonacci(n) {\n  let seq = [0, 1];\n  for (let i = 2; i < n; i++) {\n    seq.push(seq[i - 1] + seq[i - 2]);\n  }\n  return seq.slice(0, n);\n}",
    "test": "console.log(fibonacci(5)); // Output: [0, 1, 1, 2, 3]"
  },
  {
    "title": "Pig Latin",
    "description": "Convert a word to Pig Latin.",
    "function": "function toPigLatin(word) {\n  return word.slice(1) + word[0] + 'ay';\n}",
    "test": "console.log(toPigLatin('hello')); // Output: 'ellohay'"
  },
  {
    "title": "Compound Interest",
    "description": "Calculate compound interest.",
    "function": "function compoundInterest(p, r, t, n) {\n  return p * Math.pow((1 + r/n), n*t);\n}",
    "test": "console.log(compoundInterest(1000, 0.05, 1, 12));"
  },
  {
    "title": "Multiplication Table",
    "description": "Print multiplication table for a number.",
    "function": "function multiplicationTable(n) {\n  for (let i = 1; i <= 10; i++) {\n    console.log(`${n} x ${i} = ${n*i}`);\n  }\n}",
    "test": "multiplicationTable(5);"
  },
  {
    "title": "Array Intersection",
    "description": "Find the intersection of two arrays.",
    "function": "function arrayIntersection(a, b) {\n  return a.filter(item => b.includes(item));\n}",
    "test": "console.log(arrayIntersection([1, 2, 3], [2, 3, 4])); // Output: [2, 3]"
  },
  {
    "title": "Deep Clone Object",
    "description": "Deeply clone a JavaScript object.",
    "function": "function deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}",
    "test": "console.log(deepClone({ a: 1, b: { c: 2 } }));"
  },
  {
    "title": "Jump Game",
    "description": "Check if you can reach the last index from the first index in the array.",
    "function": "function canJump(nums) {\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (i > max) return false;\n    max = Math.max(max, i + nums[i]);\n  }\n  return true;\n}",
    "test": "console.log(canJump([2,3,1,1,4])); // Output: true"
  },
  {
    "title": "Math Expression Parser",
    "description": "Evaluate simple math expressions as strings.",
    "function": "function parseExpression(expr) {\n  return Function(`return ${expr}`)();\n}",
    "test": "console.log(parseExpression('2 + 3 * 4')); // Output: 14"
  },
  {
    "title": "Virtual DOM",
    "description": "Create a virtual DOM node.",
    "function": "function createVNode(tag, props, ...children) {\n  return { tag, props, children };\n}",
    "test": "console.log(createVNode('div', { id: 'app' }, 'Hello'));"
  },
  {
    "title": "Event System",
    "description": "Create a simple event emitter.",
    "function": "class EventEmitter {\n  constructor() { this.events = {}; }\n  on(event, listener) {\n    (this.events[event] ||= []).push(listener);\n  }\n  emit(event, ...args) {\n    (this.events[event] || []).forEach(fn => fn(...args));\n  }\n}",
    "test": "const ee = new EventEmitter();\nee.on('log', msg => console.log(msg));\nee.emit('log', 'Hello');"
  },
  {
    "title": "Template Engine",
    "description": "Render a simple template with placeholders.",
    "function": "function render(template, data) {\n  return template.replace(/{{(\\w+)}}/g, (_, key) => data[key] || '');\n}",
    "test": "console.log(render('Hello {{name}}', { name: 'World' })); // Output: Hello World"
  },
  {
    "title": "AES Encryption",
    "description": "Encrypt text using AES (with CryptoJS).",
    "function": "function encrypt(text, key) {\n  return CryptoJS.AES.encrypt(text, key).toString();\n}",
    "test": "// Requires CryptoJS\n// console.log(encrypt('secret', 'key'));"
  },
  {
    "title": "Caesar Cipher",
    "description": "Encrypt a string using Caesar cipher.",
    "function": "function caesarCipher(str, shift) {\n  return str.replace(/[a-z]/gi, c =>\n    String.fromCharCode((c.toLowerCase().charCodeAt(0) - 97 + shift) % 26 + 97));\n}",
    "test": "console.log(caesarCipher('abc', 3)); // Output: def"
  },
  {
    "title": "CSV Parser",
    "description": "Parse CSV data into an array.",
    "function": "function parseCSV(csv) {\n  return csv.trim().split('\\n').map(row => row.split(','));\n}",
    "test": "console.log(parseCSV('a,b,c\\n1,2,3'));"
  },
  {
    "title": "Custom JSON Parser",
    "description": "Parse JSON without using JSON.parse.",
    "function": "function customParse(str) {\n  return eval('(' + str + ')');\n}",
    "test": "console.log(customParse('{\"a\":1}'));"
  },
  {
    "title": "Promise Library",
    "description": "Create a minimal Promise wrapper.",
    "function": "function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}",
    "test": "delay(1000).then(() => console.log('Done'));"
  },
  {
    "title": "QR Code Generator",
    "description": "Generate QR code using an external library.",
    "function": "function generateQR(text) {\n  // Use qrcode library\n  QRCode.toCanvas(document.getElementById('canvas'), text);\n}",
    "test": "// generateQR('https://example.com');"
  },
  {
    "title": "Caching System",
    "description": "Create a simple in-memory cache.",
    "function": "class Cache {\n  constructor() { this.store = {}; }\n  set(key, val) { this.store[key] = val; }\n  get(key) { return this.store[key]; }\n}",
    "test": "const c = new Cache();\nc.set('x', 5);\nconsole.log(c.get('x'));"
  },
  {
    "title": "Quick Sort",
    "description": "Sort an array using quicksort.",
    "function": "function quickSort(arr) {\n  if (arr.length <= 1) return arr;\n  const pivot = arr[0];\n  const left = arr.slice(1).filter(x => x < pivot);\n  const right = arr.slice(1).filter(x => x >= pivot);\n  return [...quickSort(left), pivot, ...quickSort(right)];\n}",
    "test": "console.log(quickSort([3,6,1,5]));"
  },
  {
    "title": "Binary Search",
    "description": "Perform binary search on sorted array.",
    "function": "function binarySearch(arr, x) {\n  let l = 0, r = arr.length - 1;\n  while (l <= r) {\n    const m = Math.floor((l + r) / 2);\n    if (arr[m] === x) return m;\n    x < arr[m] ? r = m - 1 : l = m + 1;\n  }\n  return -1;\n}",
    "test": "console.log(binarySearch([1,2,3,4,5], 3));"
  },
  {
    "title": "Theme System",
    "description": "Switch between light and dark themes.",
    "function": "function toggleTheme() {\n  document.body.classList.toggle('dark');\n}",
    "test": "// toggleTheme();"
  },
  {
    "title": "Auth System",
    "description": "Simulate a basic user login check.",
    "function": "function authenticate(user, pass) {\n  return user === 'admin' && pass === '1234';\n}",
    "test": "console.log(authenticate('admin', '1234')); // Output: true"
  },
  {
    "title": "Digital Signature",
    "description": "Create a basic digital signature with hashing.",
    "function": "function sign(data, secret) {\n  return CryptoJS.HmacSHA256(data, secret).toString();\n}",
    "test": "// Requires CryptoJS\n// console.log(sign('data', 'secret'));"
  },
  {
    "title": "Markdown Parser",
    "description": "Convert markdown headers to HTML.",
    "function": "function parseMarkdown(md) {\n  return md.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n}",
    "test": "console.log(parseMarkdown('# Hello'));"
  },
  {
    "title": "PDF Generator",
    "description": "Generate a PDF file (with jsPDF).",
    "function": "function generatePDF(text) {\n  const doc = new jsPDF();\n  doc.text(text, 10, 10);\n  doc.save('file.pdf');\n}",
    "test": "// generatePDF('Hello World');"
  },
  {
    "title": "Routing System",
    "description": "Create a simple SPA router.",
    "function": "function router(path) {\n  const routes = { '/': 'Home', '/about': 'About' };\n  return routes[path] || '404';\n}",
    "test": "console.log(router('/about'));"
  },
  {
    "title": "Chart Generator",
    "description": "Render chart using a library like Chart.js.",
    "function": "function generateChart(ctx, data) {\n  new Chart(ctx, { type: 'bar', data });\n}",
    "test": "// generateChart(canvasContext, chartData);"
  },
  {
    "title": "Validation Library",
    "description": "Validate email format.",
    "function": "function isValidEmail(email) {\n  return /^[\\w.-]+@[\\w.-]+\\.\\w+$/.test(email);\n}",
    "test": "console.log(isValidEmail('test@example.com'));"
  },
  {
    "title": "Notification System",
    "description": "Show browser notification.",
    "function": "function notify(msg) {\n  if (Notification.permission === 'granted') {\n    new Notification(msg);\n  }\n}",
    "test": "// notify('You have a new message!');"
  },
  {
    "title": "Random Code Generator",
    "description": "Generate a random alphanumeric code.",
    "function": "function randomCode(length) {\n  return [...Array(length)].map(() => Math.random().toString(36)[2]).join('');\n}",
    "test": "console.log(randomCode(8));"
  },
  {
    "title": "State Management",
    "description": "Simple store to manage state.",
    "function": "class Store {\n  constructor(state) { this.state = state; }\n  get(key) { return this.state[key]; }\n  set(key, val) { this.state[key] = val; }\n}",
    "test": "const store = new Store({ count: 0 });\nstore.set('count', 5);\nconsole.log(store.get('count'));"
  },
  {
    "title": "Auto Documentation",
    "description": "Generate docs from function comments.",
    "function": "function generateDocs(fn) {\n  return fn.toString().match(/\\/\\*\\*(.*?)\\*\\//s)?.[1].trim();\n}",
    "test": "/** Adds numbers */\nfunction add(a, b) { return a + b; }\nconsole.log(generateDocs(add));"
  },
  {
    "title": "Text Search Engine",
    "description": "Search word in a text document.",
    "function": "function search(text, word) {\n  return text.includes(word);\n}",
    "test": "console.log(search('hello world', 'world')); // Output: true"
  },
  {
    "title": "Unit Testing System",
    "description": "Simple assertion-based testing.",
    "function": "function test(name, fn) {\n  try { fn(); console.log(name + ' passed'); }\n  catch (e) { console.error(name + ' failed', e); }\n}",
    "test": "test('Addition', () => { if (1 + 1 !== 2) throw 'Fail'; });"
  }
]