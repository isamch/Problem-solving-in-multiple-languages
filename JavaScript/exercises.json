[
  {
    "title": "Auth System",
    "description": "Simulate a basic user login check.",
    "function": "function authenticate(user, pass) {\n  return user === 'admin' && pass === '1234';\n}",
    "test": "console.log(authenticate('admin', '1234')); // Output: true"
  },
  {
    "title": "Digital Signature",
    "description": "Create a basic digital signature with hashing.",
    "function": "function sign(data, secret) {\n  return CryptoJS.HmacSHA256(data, secret).toString();\n}",
    "test": "// Requires CryptoJS\n// console.log(sign('data', 'secret'));"
  },
  {
    "title": "Markdown Parser",
    "description": "Convert markdown headers to HTML.",
    "function": "function parseMarkdown(md) {\n  return md.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n}",
    "test": "console.log(parseMarkdown('# Hello'));"
  },
  {
    "title": "PDF Generator",
    "description": "Generate a PDF file (with jsPDF).",
    "function": "function generatePDF(text) {\n  const doc = new jsPDF();\n  doc.text(text, 10, 10);\n  doc.save('file.pdf');\n}",
    "test": "// generatePDF('Hello World');"
  },
  {
    "title": "Routing System",
    "description": "Create a simple SPA router.",
    "function": "function router(path) {\n  const routes = { '/': 'Home', '/about': 'About' };\n  return routes[path] || '404';\n}",
    "test": "console.log(router('/about'));"
  },
  {
    "title": "Chart Generator",
    "description": "Render chart using a library like Chart.js.",
    "function": "function generateChart(ctx, data) {\n  new Chart(ctx, { type: 'bar', data });\n}",
    "test": "// generateChart(canvasContext, chartData);"
  },
  {
    "title": "Validation Library",
    "description": "Validate email format.",
    "function": "function isValidEmail(email) {\n  return /^[\\w.-]+@[\\w.-]+\\.\\w+$/.test(email);\n}",
    "test": "console.log(isValidEmail('test@example.com'));"
  },
  {
    "title": "Notification System",
    "description": "Show browser notification.",
    "function": "function notify(msg) {\n  if (Notification.permission === 'granted') {\n    new Notification(msg);\n  }\n}",
    "test": "// notify('You have a new message!');"
  },
  {
    "title": "Random Code Generator",
    "description": "Generate a random alphanumeric code.",
    "function": "function randomCode(length) {\n  return [...Array(length)].map(() => Math.random().toString(36)[2]).join('');\n}",
    "test": "console.log(randomCode(8));"
  },
  {
    "title": "State Management",
    "description": "Simple store to manage state.",
    "function": "class Store {\n  constructor(state) { this.state = state; }\n  get(key) { return this.state[key]; }\n  set(key, val) { this.state[key] = val; }\n}",
    "test": "const store = new Store({ count: 0 });\nstore.set('count', 5);\nconsole.log(store.get('count'));"
  },
  {
    "title": "Auto Documentation",
    "description": "Generate docs from function comments.",
    "function": "function generateDocs(fn) {\n  return fn.toString().match(/\\/\\*\\*(.*?)\\*\\//s)?.[1].trim();\n}",
    "test": "/** Adds numbers */\nfunction add(a, b) { return a + b; }\nconsole.log(generateDocs(add));"
  },
  {
    "title": "Text Search Engine",
    "description": "Search word in a text document.",
    "function": "function search(text, word) {\n  return text.includes(word);\n}",
    "test": "console.log(search('hello world', 'world')); // Output: true"
  },
  {
    "title": "Unit Testing System",
    "description": "Simple assertion-based testing.",
    "function": "function test(name, fn) {\n  try { fn(); console.log(name + ' passed'); }\n  catch (e) { console.error(name + ' failed', e); }\n}",
    "test": "test('Addition', () => { if (1 + 1 !== 2) throw 'Fail'; });"
  }
]